{"version":3,"sources":["components/Header.js","components/ArticleCard.js","components/MainArticles.js","components/HeadlineArticles.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","ArticleCard","props","url","target","urlToImage","src","alt","format","publishedAt","author","title","description","length","substr","source","Articles","useState","articles","filters","country","category","countryData","isInGrid","state","setState","handleClick","el","newState","classList","useEffect","fetch","process","then","response","json","dataParsed","Fragment","Object","keys","map","key","i","htmlFor","id","onChange","e","element","value","handleChange","item","content","type","onClick","article","index","name","HeadlinesArticles","data","setData","App","MainArticles","HeadlineArticles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f978fb1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n      <div className=\"header\">\n        <header className=\"app-header\">\n          <a href=\"/#\" className=\"app-header-link\"><h1>What News Today ?</h1></a>\n        </header>\n      </div>\n    )\n}\n\nexport default Header","import React from \"react\";\nimport Moment from 'react-moment';\n\nfunction ArticleCard(props) {\n  return (\n    <div className=\"card\">\n      <a href={`${props.url}`} target=\"blank\" className=\"card--link--source\">\n        <div className=\"card-body\">\n          <div className=\"card--img\">\n            {\n              props.urlToImage === null ?\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/No_image_available_600_x_450.svg/600px-No_image_available_600_x_450.svg.png\" className=\"card-img-list\" alt=\"...\"/>\n                : <img src={`${props.urlToImage}`} className=\"card-img-list\" alt=\"...\"/>\n            }\n          </div>\n          <div className=\"row mt-2 mb-2 card--date--author\">\n            <div className=\"card--date col-6\">\n              <Moment format=\"DD/MM/YYYY\">\n                {`${props.publishedAt}`}\n              </Moment>\n            </div>\n            <div className=\"card--author col-6\">\n              <p className=\"card--author--name\">{props.author}</p>\n            </div>\n          </div>\n          <div className=\"card--about\">\n\n            <h5 className=\"card-title\">{props.title}</h5>\n            <div className=\"card-description\">\n              {\n                props.description && props.description.length > 40 ?\n                <p>{props.description.substr(0, 100)}... <a href={`${props.url}`} target=\"blank\"> Read more</a></p> :\n                <p>{props.description}</p>\n              }\n            </div>\n          <div className=\"card--source\">\n            <strong>\n              <p>{props.source}</p>\n            </strong>\n              </div>\n          </div>\n        </div>\n      </a>\n    </div>\n  )\n}\n\nexport default ArticleCard","import React, { useState, useEffect } from 'react';\nimport ArticleCard from \"./ArticleCard\"\nimport countryData from \"./../utilis/sources.json\"\n\nfunction Articles() {\n  const [state, setState] = useState({\n    articles: null,\n    filters: {\n      country: \"fr\",\n      category: \"business\"\n    },\n    country: [...countryData.country],\n    category: [...countryData.category],\n    isInGrid: true\n  });\n  const url = 'https://newsapi.org/v2/';\n\n  const handleChange = element => {\n    const newState = {...state};\n    newState.filters[element.target.id] = element.target.value\n    setState(newState);\n  };\n\n  const handleClick = el => {\n    const newState = {...state};\n\n    if (el.target.classList[3] === \"btn--list\") {\n      newState.isInGrid = false;\n      setState(newState);\n    } else {\n      newState.isInGrid = true;\n      setState(newState);\n    }\n  }\n\n  useEffect(() => {\n    fetch(`${url}top-headlines?country=${state.filters.country}&category=${state.filters.category}&pageSize=50&apiKey=${process.env.REACT_APP_API_KEY_ARTICLES}`)\n    .then(response => response.json())\n    .then(dataParsed => {\n        const newState = {...state};\n        newState.articles = [...dataParsed.articles];\n        setState(newState);\n    })\n  }, [state.filters.country, state.filters.category]);\n\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <div className=\"countries col-6 mt-5\">\n          {\n            Object.keys(state.filters).map((key, i) => {\n              return (\n                <>\n                  <label htmlFor={key} className=\"label--select ml-2 mt-1\">{key}</label>\n                  <select className=\"custom-select select\" id={key} onChange={e => handleChange(e)}>\n                    {\n                      state[key].map(item => {\n                        return typeof item === \"object\" ?\n                          <option value={item.value} key={item.value}>{item.content}</option> :\n                          <option value={item} key={item}>{item}</option>\n                      })\n                    }\n                  </select>\n                </>\n              )\n              })\n            }\n        </div>\n        <div className=\"buttons--render mt-5\">\n          <button type=\"button\" className=\"btn btn-primary btn-sm btn--grid\" onClick={e => handleClick(e)}><i className=\"fas fa-grip-horizontal mr-1\"></i>Grid</button>\n          <button type=\"button\" className=\"btn btn-secondary btn-sm btn--list\" onClick={e => handleClick(e)}><i className=\"fas fa-bars mr-1\"></i>List</button>\n        </div>\n      </div>\n      <div className=\"container container--cards\">\n        <div className=\"row\">\n          { (function() {\n            if(state.articles === null) {\n              return <i className=\"fa fa-spinner\"></i>\n            } else{\n              return state.articles.map((article, index) => {\n                return (\n                  <div className={`${state.isInGrid ? \"col-4 article--cards--grid\" : \"col-12 article--cards--list\"}`} key={index} >\n                    <ArticleCard urlToImage={article.urlToImage} publishedAt={article.publishedAt} author={article.author} title={article.title} description={article.description} source={article.source.name} url={article.url} key={index} />\n                  </div>\n                )\n              })\n            }\n          }) ()\n        }\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Articles","import React, { useState, useEffect } from 'react';\nimport ArticleCard from \"./ArticleCard\"\n\nfunction HeadlinesArticles() {\n  const [data, setData] = useState({\n    articles: null\n  });\n  const url = 'https://newsapi.org/v2/'\n\n  useEffect(() => {\n    fetch(`${url}everything?domains=lemonde.fr&apiKey=${process.env.REACT_APP_API_KEY_ARTICLES}`)\n    .then(response => response.json())\n    .then(data => setData({articles: data.articles}))\n  }, []);\n\n  return (\n    <React.Fragment>\n    <h3 className=\"card--articles--headlines--title\">By Le Monde:</h3>\n      { (function() {\n        if(data.articles === null) {\n          return <i className=\"fa fa-spinner\"></i>\n        } else{\n          return data.articles.map((article, index) => {\n            return (\n              <div className=\"col-10 card--articles--headlines\" key={index}>\n                <ArticleCard urlToImage={article.urlToImage} publishedAt={article.publishedAt} author={article.author} title={article.title} source={article.source.name} url={article.url} key={index} />\n              </div>\n            )\n          })\n        }\n        }) ()\n      }\n    </React.Fragment>\n  );\n}\n\nexport default HeadlinesArticles","import React from 'react';\nimport Header from \"./components/Header\";\nimport MainArticles from \"./components/MainArticles\";\nimport HeadlineArticles from \"./components/HeadlineArticles\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App col-12\">\n      <div className=\"container--app\">\n        <Header />\n        <div className=\"row\">\n          <div className=\"col-8 articles--everything\">\n            <MainArticles />\n          </div>\n          <div className=\"col-3 articles--headlines\">\n            <HeadlineArticles />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}